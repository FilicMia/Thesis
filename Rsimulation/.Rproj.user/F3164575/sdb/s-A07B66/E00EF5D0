{
    "collab_server" : "",
    "contents" : "#Simplefied position estimation calculator.\n#Let T = t+tau - universal clock time at point of the receive of the signal = true receive clock time + clock bias\n#T_s = t_s + tau_s - Universal clock time at point of the transmition of the signal = true satellite time + satellite clock bias(due to the satellite)\n#rho_s(t, t_s) is the range from receiver (at receive time) to the satellite (at transmit time)\n#R = rho_s(t,t_s) + c(tau-tau_s) (= (T-T_s)c )\n#\n#This  assumes  that  the  inverse  to \n#(A^T)A \n#exists.  For  example, m≥4is  a  necessary  (but  not sufficient)  condition.    Problems  can  exist  if,  for  example,  a  pair  of  satellites  lie  in  the  same \n#line  of  sight,  or  if  the  satellites  are  all  in  the  same  orbital  plane.  In  almost  all  practical \n#situations, m≥5is  sufficient.    Alternatively,  one  parameter  could  be  left  unestimated  (e.g.,                                                                    the height could be fixed to sea-level for a boat)\n#\n\n#read R (pseudo ranges calculated from PRN code) - observed\nR = read.csv('pseudoranges.txt', header = TRUE);\nR <- as.matrix(R$R)\n#read saletites coordinates\nS = read.csv('satellites.txt')\nS <- as.matrix(S)\n#linearisation.. b = Ax + error\n# solution due to the least square solution of x is \n# x = ((A#t)A)^(-1)A#t * b\n# where A = colums of partial derivations od P, each row, one satellite\n#b = R-rho\nx_0 = c(8,099,0) # \nc = 299792458\n# c(x0-x_s,y0-y_s,z0-z_s,tau0-tau_s)\n#A does not change, no matter that is it x-xo/rho and xo changes as well as rho\nerror = c(3,3,3)\n\nwhile(norm(t(error)) > 2){\n  preRhoVector = t(apply(S, 1, function(x) (x-x_0))) #x-x_0\n  rho = t(t(apply(preRhoVector,1, function(x) norm(t(x),'F'))))\n  A = t(apply(preRhoVector,1, function(x) c(x/norm(t(x),'F'), 1) )) #x_0[4] = detla_t *c\n  b = R-rho\n  AT = t(A)\n  ATAAT = solve(A)%*%solve(AT)%*%AT # = solve(AT%*%A)%*%AT <- MLE procjenitelj\n  \n  error <- ATAAT%*%b\n  x_0 = x_0 + error[0:3,]\n  print(norm(error))\n}\n#pretpostavljam da je kovarijanca prevelika pa da ne konvergira.\n\n#The orthogonal projection matrix P corresponding to matrix x is defined as P=x(xTx)\n\n\n",
    "created" : 1492353301656.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1701060018",
    "id" : "E00EF5D0",
    "lastKnownWriteTime" : 1492427481,
    "last_content_update" : 1492427481840,
    "path" : "~/Documents/Diplomski/Rsimulation/baska2.R",
    "project_path" : "baska2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}