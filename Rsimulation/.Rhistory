source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
file.remove('razmakIteracija.txt','stvarnoOdstupanje.txt')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
file.remove('razmakIteracija.txt','stvarnoOdstupanje.txt')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
u = exp(niter-iter) * min(6000,niter-iter)
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
exp(niter-iter)
exp(niter-iter+1)
niter-iter
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
x_0
realPosition
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
x_0 = x_0 + delt #(x,y,z,c*dT)
source('~/GitHub/Thesis/Rsimulation/dipl3.R', encoding = 'UTF-8')
x_0
err
delt
err
source('~/GitHub/Thesis/Rsimulation/dipl3.R', encoding = 'UTF-8')
x_0
delt
A_iter
AA
RS
c
AA
source('~/GitHub/Thesis/Rsimulation/dipl3.R', encoding = 'UTF-8')
AA
rm(list=ls())
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
install.packages("matlib")
library("matlib", lib.loc="~/R/win-library/3.3")
install.packages("limSolve")
library(MASS)
library(matlib)
library(limSolve)
library(matrixcalc)
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl3.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
rm(list=ls())
library(MASS)
library(matlib)
library(limSolve)
library(matrixcalc)
iter = 0
niter = 100
c <- 2.99792458E+08 # brzina svjetlosti [m/s], po GPS standardu
p = read.csv('pseudoranges5a.txt', header = FALSE);
p <- as.matrix(p[,1])
#učitaj koordinate satelita
S = read.csv('satellites5.txt', header = FALSE)
S <- as.matrix(S)
nRows = dim(S)[1]
nCols = dim(S)[2]+1
if(length(p) < nCols){
stop('Not enough satellites - unable to estimate position. The script will quit.')
}
delt <- c(11,11,11,11) # postav po?etnih uvjeta za iteraciju - razlika susjednih iteracija (zaustavlja iteraciju)
x_0 <- t(t(c(0, 0, 0, 0)))
AA = t(apply(RS, 1, function(x) (x_iter - x))) #zbog lakše derivacije je x_-x
#korišteni novi podatci
library("MASS","matrixcalc")
#pseudo-udaljenosti
c <- 2.99792458E+08 # brzina svjetlosti [m/s], po GPS standardu
R = read.csv('pseudoranges5a.txt', header = FALSE);
R <- as.matrix(R[,1])
#učitaj koordinate satelita
S = read.csv('satellites5.txt', header = FALSE)
S <- as.matrix(S)
x_0 = c(1,1,1,1) #[x,y,z,d_T] d_t se kasnije množi sa c da bi se oduzeo od [x_i,y_i,z_i,d]
delt = c(3,3,3,3)
nRows = dim(S)[1]
nCols = dim(S)[2]+1
realPosition = c(918074.1038,5703773.539,2693918.9285,0)
unutar = append(S,rep(-c,nRows))
RS = matrix(unutar,nRows,nCols) # [x_i,y_i,z_i,d_i]
iter = 0
niter = 1000
err <- c(11,11,11,11)
#korišteni novi podatci
library("MASS","matrixcalc")
#pseudo-udaljenosti
c <- 2.99792458E+08 # brzina svjetlosti [m/s], po GPS standardu
R = read.csv('pseudoranges5a.txt', header = FALSE);
R <- as.matrix(R[,1])
#učitaj koordinate satelita
S = read.csv('satellites5.txt', header = FALSE)
S <- as.matrix(S)
x_0 = c(1,1,1,1) #[x,y,z,d_T] d_t se kasnije množi sa c da bi se oduzeo od [x_i,y_i,z_i,d]
delt = c(3,3,3,3)
nRows = dim(S)[1]
nCols = dim(S)[2]+1
realPosition = c(918074.1038,5703773.539,2693918.9285,0)
unutar = append(S,rep(c/2,nRows))
RS = matrix(unutar,nRows,nCols) # [x_i,y_i,z_i,d_i]
iter = 0
niter = 1000
err <- c(11,11,11,11)
x_iter = c(x_0[1:3],0) # samo c , a ne c-d_T
AA = t(apply(RS, 1, function(x) (x_iter - x))) #zbog lakše derivacije je x_-x
D = sqrt(AA%*%c(1,1,1,0))
AA
AA%*%c(1,1,1,0)
AA**2
D = sqrt(AA**2%*%c(1,1,1,0))
AA/D
rep(D,3)
D
D = append(matrix(rep(sqrt(AA**2%*%c(1,1,1,0)),3),nRowsmnCols-1),rep(1,nRows))
D = append(matrix(rep(sqrt(AA**2%*%c(1,1,1,0)),3),nRows,nCols-1),rep(1,nRows))
D
D = matrix(append(rep(sqrt(AA**2%*%c(1,1,1,0)),3),rep(1,nRows)),nRows,nCols)
D
AA/D
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl3.R', encoding = 'UTF-8')
sqrt(AA**2%*%c(1,1,1,0))
source('~/GitHub/Thesis/Rsimulation/dipl2.R', encoding = 'UTF-8')
b = R - D
source('~/GitHub/Thesis/Rsimulation/dipl3.R', encoding = 'UTF-8')
AA
D_xyz = AA[1:nRows,1:(nCols-1)]
D_xyz
ssv <- S**2%*%c(1,1,1)
ssv
ssv = matrix(rep(ssv,3),nRows,nCols-1)
ssv
D_xyz
S*D_xyz
A <- acos((S*D_xyz)/ssv)
E <- acos((S*D_xyz)/ssv)
ele <- pi/2 - E
ele
W = diag(1/(sin(ele))^2)
W
W = diag(1/(sin(ele))^2,nRows,nCols-1)
W = diag(1/(sin(ele))^2,nCols-1)
ele
1/(sin(ele))^2
E <- acos(((S*D_xyz)/ssv)%*%c(1,1,1))
ele <- pi/2 - E
ele
W = diag(1/(sin(ele))^2)
W
W = diag(Wii[:,1])
Wii = 1/(sin(ele))^2
W = diag(Wii[:,1])
W = diag(Wii[,1])
W
start.time <- Sys.time()
library(MASS)
library(matlib)
library(limSolve)
library(matrixcalc)
#options(error=recover)
npass <- 0 # po?etni postav brojila iteracija
S <- read.csv('satellites5.txt', header = FALSE) # u?itavanje polo?aja satelita
p <- read.csv('pseudoranges5a.txt', header = FALSE) # u?itavanje izmjerenih pseudoudaljenosti
# datoteka xxxa.txt - nekorigirane pogre?ke
# datoteka xxxb.txt - korigirane pogre?ke
p <- as.vector(p[,1])
p <- t(t(p))
if(length(p) <= length(S)){
stop('Not enough satellites - unable to estimate position. The script will quit.')
}
delta_x <- c(11,11,11,11) # postav po?etnih uvjeta za iteraciju - razlika susjednih iteracija (zaustavlja iteraciju)
x_0 <- t(t(c(0, 0, 0, 0))) # postav po?etnih uvjeta za iteraciju (procjena polo?aja)
# Definicija matrica i fizkalnih konstanti
J <- matrix(nrow = length(t(p)), ncol = length(S)+1)
R <- c(1,1)
dpr <- c(1,1)
W <- diag(length(t(p))) # matrica kovarijancija za Weighted LS solution - u po?etku postavljena kao jedini?na matrica
# za regular position estimation (pretpostavljena potpuna kompenzacija pogre?aka)
c <- 2.99792458E+08 # brzina svjetlosti [m/s], po GPS standardu
eps <- 1.0 # najve?a prihvatljiva pogre?ka komponente odre?ivanja polo?aja [m], eps = max(eps(x), eps(y), eps(z))
err <- c(0,0,0)
rlevel <- 11
for(i in 1:length(t(p))){
R[i] <- sqrt((S[i,1] - x_0[1])^2 + (S[i,2] - x_0[2])^2 + (S[i,3] - x_0[3])^2) #udaljenost satelita i x_0
dpr[i] <- p[i] - R[i] #b = pseudoudeljenost - izračunata udaljenost
ssv <- 0
for(j in 1:3){
J[i,j] <- (x_0[j] - S[i,j])/R[i] #matrica parcijalnih derivacija
ssv <- ssv + (S[i,j])^2
}
J[i, 4] <- c
# Procjena kuta elevacije satelita
d_x <- S[i,1] - x_0[1]
d_y <- S[i,2] - x_0[2]
d_z <- S[i,3] - x_0[3]
A <- acos((S[i,1] * d_x + S[i,2] * d_y + S[i,3] * d_z)/ssv)
ele <- pi/2 - A
# [i, i]-ti element matrice kovarijancija
W[i, i] <- 1/(sin(ele))^2
}
W
rm(list=ls())
library(MASS)
library(matlib)
library(limSolve)
library(matrixcalc)
#options(error=recover)
npass <- 0 # po?etni postav brojila iteracija
S <- read.csv('satellites5.txt', header = FALSE) # u?itavanje polo?aja satelita
p <- read.csv('pseudoranges5a.txt', header = FALSE) # u?itavanje izmjerenih pseudoudaljenosti
# datoteka xxxa.txt - nekorigirane pogre?ke
# datoteka xxxb.txt - korigirane pogre?ke
p <- as.vector(p[,1])
p <- t(t(p))
if(length(p) <= length(S)){
stop('Not enough satellites - unable to estimate position. The script will quit.')
}
delta_x <- c(11,11,11,11) # postav po?etnih uvjeta za iteraciju - razlika susjednih iteracija (zaustavlja iteraciju)
x_0 <- t(t(c(0, 0, 0, 0))) # postav po?etnih uvjeta za iteraciju (procjena polo?aja)
# Definicija matrica i fizkalnih konstanti
J <- matrix(nrow = length(t(p)), ncol = length(S)+1)
R <- c(1,1)
dpr <- c(1,1)
W <- diag(length(t(p))) # matrica kovarijancija za Weighted LS solution - u po?etku postavljena kao jedini?na matrica
# za regular position estimation (pretpostavljena potpuna kompenzacija pogre?aka)
c <- 2.99792458E+08 # brzina svjetlosti [m/s], po GPS standardu
eps <- 1.0 # najve?a prihvatljiva pogre?ka komponente odre?ivanja polo?aja [m], eps = max(eps(x), eps(y), eps(z))
err <- c(0,0,0)
rlevel <- 11
for(i in 1:length(t(p))){
R[i] <- sqrt((S[i,1] - x_0[1])^2 + (S[i,2] - x_0[2])^2 + (S[i,3] - x_0[3])^2) #udaljenost satelita i x_0
dpr[i] <- p[i] - R[i] #b = pseudoudeljenost - izračunata udaljenost
ssv <- 0
for(j in 1:3){
J[i,j] <- (x_0[j] - S[i,j])/R[i] #matrica parcijalnih derivacija
ssv <- ssv + (S[i,j])^2
}
J[i, 4] <- c
# Procjena kuta elevacije satelita
d_x <- S[i,1] - x_0[1]
d_y <- S[i,2] - x_0[2]
d_z <- S[i,3] - x_0[3]
A <- acos((S[i,1] * d_x + S[i,2] * d_y + S[i,3] * d_z)/ssv)
ele <- pi/2 - A
# [i, i]-ti element matrice kovarijancija
W[i, i] <- 1/(sin(ele))^2
}
W
rm(list=ls())
library(MASS)
library(matlib)
library(limSolve)
library(matrixcalc)
iter = 0
niter = 100
c <- 2.99792458E+08 # brzina svjetlosti [m/s], po GPS standardu
R = read.csv('pseudoranges5a.txt', header = FALSE);
R <- as.matrix(p[,1])
#učitaj koordinate satelita
S = read.csv('satellites5.txt', header = FALSE)
S <- as.matrix(S)
nRows = dim(S)[1]
nCols = dim(S)[2]+1
if(length(p) < nCols){
stop('Not enough satellites - unable to estimate position. The script will quit.')
}
delt <- c(11,11,11,11) # postav po?etnih uvjeta za iteraciju - razlika susjednih iteracija (zaustavlja iteraciju)
err <- c(11,11,11,11)
x_0 <- c(0, 0, 0, 0) # postav po?etnih uvjeta za iteraciju (procjena polo?aja)
unutar = append(S,rep(-c,nRows))
RS = matrix(unutar,nRows,nCols) # [x_i,y_i,z_i,d_i]
start.time <- Sys.time()# za regular position estimation (pretpostavljena potpuna kompenzacija pogre?aka)
eps <- 1.0 # najve?a prihvatljiva pogre?ka komponente odre?ivanja polo?aja [m], eps = max(eps(x), eps(y), eps(z))
rlevel <- 11
x_iter = c(x_0[1:3],0) # samo c , a ne c-d_T
AA = t(apply(RS, 1, function(x) (x_iter - x))) #zbog lakše derivacije je x_-x
D = sqrt(AA**2%*%c(1,1,1,0))
DD = matrix(append(rep(D,3),rep(1,nRows)),nRows,nCols)
A_iter = AA/DD #J_k
# Procjena kuta elevacije satelita
D_xyz = AA[1:nRows,1:(nCols-1)]
ssv <- S**2%*%c(1,1,1)
ssv = matrix(rep(ssv,3),nRows,nCols-1)
#zbroj svih kooordinata satelita na kvadrat
E <- acos(((S*D_xyz)/ssv)%*%c(1,1,1))
ele <- pi/2 - E
Wii = 1/(sin(ele))^2
W = diag(Wii[,1])
W
rm(list=ls())
library(MASS)
library(matlib)
library(limSolve)
library(matrixcalc)
iter = 0
niter = 100
c <- 2.99792458E+08 # brzina svjetlosti [m/s], po GPS standardu
R = read.csv('pseudoranges5a.txt', header = FALSE);
R <- as.matrix(p[,1])
#učitaj koordinate satelita
S = read.csv('satellites5.txt', header = FALSE)
S <- as.matrix(S)
nRows = dim(S)[1]
nCols = dim(S)[2]+1
if(length(p) < nCols){
stop('Not enough satellites - unable to estimate position. The script will quit.')
}
delt <- c(11,11,11,11) # postav po?etnih uvjeta za iteraciju - razlika susjednih iteracija (zaustavlja iteraciju)
err <- c(11,11,11,11)
x_0 <- c(0, 0, 0, 0) # postav po?etnih uvjeta za iteraciju (procjena polo?aja)
unutar = append(S,rep(-c,nRows))
RS = matrix(unutar,nRows,nCols) # [x_i,y_i,z_i,d_i]
start.time <- Sys.time()# za regular position estimation (pretpostavljena potpuna kompenzacija pogre?aka)
eps <- 1.0 # najve?a prihvatljiva pogre?ka komponente odre?ivanja polo?aja [m], eps = max(eps(x), eps(y), eps(z))
rlevel <- 11
x_iter = c(x_0[1:3],0) # samo c , a ne c-d_T
AA = t(apply(RS, 1, function(x) (x_iter - x))) #zbog lakše derivacije je x_-x
D = sqrt(AA**2%*%c(1,1,1,0))
DD = matrix(append(rep(D,3),rep(1,nRows)),nRows,nCols)
A_iter = AA/DD #J_k
# Procjena kuta elevacije satelita
D_xyz = AA[1:nRows,1:(nCols-1)]
ssv <- S**2%*%c(1,1,1)
ssv = matrix(rep(ssv,3),nRows,nCols-1)
#zbroj svih kooordinata satelita na kvadrat
E <- acos(((S*D_xyz)/ssv)%*%c(1,1,1))
ele <- pi/2 - E
Wii = 1/(sin(ele))^2
W = diag(Wii[,1])
W
if(length(R) < nCols){
stop('Not enough satellites - unable to estimate position. The script will quit.')
}
dim(R)[1]
if(dim(R)[1] < nCols){
stop('Not enough satellites - unable to estimate position. The script will quit.')
}
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
ele
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
E <- acos(((S*D_xyz)/ssv)%*%c(1,1,1))
S*D_xyz)/ssv
(S*D_xyz)/ssv
ssv
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
print("sd")
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
dim(A_iter)
A_iter <- matrix(nRows, nCols)
dim(A_iter)
nRows = dim(S)[1]
nRows
A_iter
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
dx
t(A_iter) %*% W %*% A_iter
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
A <- acos((S[i,1] * d_x + S[i,2] * d_y + S[i,3] * d_z)/ssv)
A
ele <- pi/2 - A
ele
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
A
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
A_iter
S
x_0
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
b
R
RR
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
R[,1]
rr
rr
RR
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
W
A_iter
chol2inv(t(A_iter) %*% W %*% A_iter)
t(A_iter)
W
b
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
b
b <- R[,1] - RR
b
R
RR
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
for(j in 1:3){
J[i,j] <- (x_0[j] - S[i,j])/R[i] #matrica parcijalnih derivacija
ssv <- ssv + (S[i,j])^2
}
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
yy <- gr2$V3
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
x_0
delt
dx
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
while(eps < rlevel || iter < 100){
# iteracija - sve dok sve pogre?ke po komponentama ne budu manje od eps
x_iter = c(x_0[1:3],0) # samo c , a ne c-d_T
AA = t(apply(RS, 1, function(x) (x_iter - x))) #zbog lakše derivacije je x_-x
D = sqrt(AA**2%*%c(1,1,1,0))
DD = matrix(append(rep(D,3),rep(1,nRows)),nRows,nCols)
A_iter = AA/DD #J_k
#Procjena kuta elevacije satelita
D_xyz = AA[1:nRows,1:(nCols-1)]
ssv <- S**2%*%c(1,1,1)#zbroj svih kooordinata satelita na kvadrat
ssv = matrix(rep(ssv,3),nRows,nCols-1)
E <- acos(((S*D_xyz)/ssv)%*%c(1,1,1))
ele <- pi/2 - E
Wii = 1/(sin(ele))^2
W = diag(Wii[,1])
b <- R[,1] - D
#dx <- chol2inv(t(A_iter) %*% W %*% A_iter) %*% t(A_iter) %*% W %*% b #
dx <- svd.inverse(t(A_iter) %*% W %*% A_iter) %*% t(A_iter) %*% W %*% b # najpreciznija
#drugikorijen iz W
#dx <- qr.coef(qr(sqrt(W)%*%A_iter), sqrt(W)%*%b)
x_0 <- x_0 + dx
iter <- iter + 1
cat(c(iter, dx[1], dx[2], dx[3]),' \r',file="razmakIteracija.txt", append=TRUE) # upisivanje vrijednosti dx radi kasnije analize brzine i to?nosti postupka
err[1] <- x_0[1] - 918074.1038
err[2] <- x_0[2] - 5703773.539
err[3] <- x_0[3] -2693918.9285
cat(c(iter, err[1], err[2], err[3]),' \r',file="stvarnoOdstupanje.txt", append=TRUE)
# Kontrola
print(iter)
print (S)
print (dx)
rlevel <- abs(dx[1]) + abs(dx[2]) + abs(dx[3])
}
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl4.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
chol2inv(PI)
PX
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/ff/GPS_rev 5.0.R', encoding = 'UTF-8')
source('~/GitHub/Thesis/Rsimulation/dipl1.R', encoding = 'UTF-8')
